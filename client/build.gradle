/**
 * This software is Copyright (C) 2017 Tod G. Harter. All rights reserved.
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

/**
 * CatFood client project. Provides build tooling to build the CatFood
 * Scala.js based web client. Also provides for setting up a fast update
 * environment for in-place edit and debug.
 */

buildscript {
    repositories {
    	maven {
    		url = uri('../../mvnrepo')
//    		url = 'http://repository.mulesoft.org/releases/'
    	}
        mavenLocal()
        mavenCentral()
    }
}

plugins {
	id "fr.brouillard.oss.gradle.jgitver" // version "0.10.0-rc03"
	id "com.github.johnrengelman.shadow" version "6.0.0"
	id 'maven-publish'
}

apply plugin: 'eclipse'
apply plugin: 'java'

group = 'com.giantelectronicbrain'
//version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

String vertxUIVersion = project.hasProperty('vertxUIVersion') ? project.property('vertxUIVersion') : '1.04-tgh'

test {
	testLogging.showStandardStreams = true
	systemProperty 'gwt.args', "-logdir build -deploy $buildDir/gwt/deploy -extra $buildDir/gwt/extra -workDir $buildDir/gwt/ -war $buildDir/gwt/war"
	onOutput { descriptor, event ->
		logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
	}
	
}

configurations {
//	sources
/*	shadowJars {
		canBeConsumed = true
		canBeResolved = false
	} */
}

/*artifacts {
	shadowJars(shadowJar)
} */

repositories {
	mavenLocal()
    mavenCentral()
    jcenter()
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}
}

dependencies {
//	implementation 'live.connector:vertxui-core:2.0.8-tgh'
	implementation 'com.google.gwt:gwt-dev:2.9.0'
	implementation 'com.google.gwt:gwt-elemental:2.9.0'
	implementation 'com.google.elemental2:elemental2-core:1.1.0'
	implementation 'com.google.elemental2:elemental2-dom:1.1.0'
	implementation 'com.github.nmorel.gwtjackson:gwt-jackson:0.15.4'
	testRuntime 'org.slf4j:slf4j-simple:1.7.30'
	implementation 'org.slf4j:slf4j-api:1.7.30'
//	compileOnly 'com.machinepublishers:jbrowserdriver:1.0.1'
//	testImplementation 'com.machinepublishers:jbrowserdriver:1.0.1'
	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	testCompileOnly 'org.projectlombok:lombok:1.18.20'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
	testRuntime files('src/test/java')
	testRuntime files('src/main/java')
	implementation 'org.webjars.bowergithub.markdown-it:markdown-it:10.0.0'
	testImplementation 'junit:junit:4.12'
}

/*task copySourceLibs(type: Copy) {

	def zipPath = configurations.sources.find { it =~ /commonmark/ }
	println("THE ZIP PATH IS: "+zipPath)
	def zipFile = file(zipPath)
	
	from zipTree(zipFile)
	into "$buildDir/sourcelibs"
} */

task copyWebContent(type: Copy) {
	from "src/main/web/content"
	into "$buildDir/content"
}

task copyWebTemplates(type: Copy) {
	from "src/main/web/templates"
	into "$buildDir/templates"
}

task copyClientSource(type: Copy) {
	from "src/main/java"
	into "$buildDir/client/src/main/java"
}

task copyWebLibs(type: Copy) {
	from "src/main/web/libs"
	into "$buildDir/jslibs"
}
